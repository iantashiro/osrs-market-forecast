{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# # OSRS Grand Exchange Data Fetcher\n# Fetches historical price data and publishes as a Kaggle dataset","metadata":{}},{"cell_type":"code","source":"import requests\nimport pandas as pd\nfrom datetime import datetime\nimport os\nimport json","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-26T19:56:20.304957Z","iopub.execute_input":"2025-03-26T19:56:20.305391Z","iopub.status.idle":"2025-03-26T19:56:20.836663Z","shell.execute_reply.started":"2025-03-26T19:56:20.305356Z","shell.execute_reply":"2025-03-26T19:56:20.835680Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import requests\nimport pandas as pd\n\ndef get_item_name(item_id):\n    \"\"\"Fetch item name from OSRS Wiki API (kept for filename generation)\"\"\"\n    url = f\"https://oldschool.runescape.wiki/w/Special:Lookup?type=item&id={item_id}\"\n    try:\n        response = requests.get(url, timeout=5, headers={'User-Agent': 'OSRS Data Collector'})\n        if response.status_code == 200:\n            return response.url.split('/')[-1].replace('_', ' ').split('#')[0].strip()\n        return f\"Item_{item_id}\"\n    except Exception as e:\n        print(f\"Error getting item name: {e}\")\n        return f\"Item_{item_id}\"\n\ndef prepare_dataset(item_id):\n    \"\"\"Generate dataset with only Date and Price (GP)\"\"\"\n    # Fetch data (original unchanged)\n    url = \"https://api.weirdgloop.org/exchange/history/osrs/all\"\n    try:\n        response = requests.get(url, params={\"id\": str(item_id)}, timeout=10)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        print(f\"Error fetching data: {e}\")\n        return None\n    \n    # Process data (now minimal)\n    item_key = next(k for k in data.keys() if k.isdigit())\n    df = pd.DataFrame(data[item_key])\n    \n    df['Date'] = pd.to_datetime(df['timestamp'], unit='ms')\n    df = df[['Date', 'price']].rename(columns={'price': 'Price (GP)'})\n    \n    # Keep original filename format\n    item_name = get_item_name(item_id)\n    clean_name = (\n        item_name.lower()\n        .replace(' ', '_')\n        .replace(\"'\", \"\")\n        .replace('(', '')\n        .replace(')', '')\n    )\n    filename = f\"osrs_{clean_name}_history.csv\"\n    \n    # Save with original naming\n    df.to_csv(filename, index=False)\n    print(f\"Saved dataset to {filename}\")\n    print(df)\n    return df\n\n# Example usage (bond ID = 13190):\nbond_data = prepare_dataset(13190)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-26T20:36:41.130911Z","iopub.execute_input":"2025-03-26T20:36:41.131282Z","iopub.status.idle":"2025-03-26T20:36:41.545415Z","shell.execute_reply.started":"2025-03-26T20:36:41.131252Z","shell.execute_reply":"2025-03-26T20:36:41.544233Z"}},"outputs":[{"name":"stdout","text":"Saved dataset to osrs_old_school_bond_history.csv\n                    Date  Price (GP)\n0    2015-03-28 00:00:00     2000000\n1    2015-03-29 00:00:00     2000000\n2    2015-03-30 00:00:00     1902808\n3    2015-03-31 00:00:00     1807667\n4    2015-04-01 00:00:00     1717283\n...                  ...         ...\n3550 2025-03-22 05:56:29    13921235\n3551 2025-03-23 04:47:30    13954364\n3552 2025-03-24 15:34:17    14040958\n3553 2025-03-25 10:26:52    14134291\n3554 2025-03-26 12:28:45    14509497\n\n[3555 rows x 2 columns]\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}